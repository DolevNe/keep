# Alternative configuration with separate containers for backend and frontend
services:
  keep-backend-offline:
    build:
      context: .
      dockerfile: Dockerfile.offline-dev
    container_name: keep-backend-offline
    working_dir: /app
    volumes:
      - .:/app
      - vendor-data:/vendor
      - ./vendor/state:/state
    environment:
      - PORT=8080
      - SECRET_MANAGER_TYPE=FILE
      - SECRET_MANAGER_DIRECTORY=/state
      - DATABASE_CONNECTION_STRING=sqlite:////state/db.sqlite3?check_same_thread=False
      - POSTHOG_DISABLED=true
      - PYTHONPATH=/app
      - PUSHER_APP_ID=1
      - PUSHER_APP_KEY=keepappkey
      - PUSHER_APP_SECRET=keepappsecret
      - PUSHER_HOST=keep-websocket-server
      - PUSHER_PORT=6001
    ports:
      - "8080:8080"
    depends_on:
      - keep-websocket-server
    command: bash -c "
      echo 'Starting Python backend...' &&
      /venv/bin/pip install -e . &&
      /venv/bin/python -m uvicorn keep.api.api:get_app --host 0.0.0.0 --port 8080 --reload
    "

  keep-frontend-offline:
    build:
      context: .
      dockerfile: Dockerfile.offline-dev
    container_name: keep-frontend-offline
    working_dir: /app/keep-ui
    volumes:
      - .:/app
      - vendor-data:/vendor
      - node-cache:/home/keep/.npm
      - pnpm-cache:/home/keep/.pnpm
    environment:
      - NEXTAUTH_SECRET=dev-secret-key
      - NEXTAUTH_URL=http://localhost:3000
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - API_URL=http://keep-backend-offline:8080
      - SENTRY_DISABLED=true
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      - keep-backend-offline
    command: bash -c "
      echo 'Starting Node.js frontend...' &&
      
      # Extract dependencies if needed
      if [ ! -d node_modules ]; then
        echo 'Extracting Node.js dependencies...' &&
        tar -xzf /vendor/node_modules.tar.gz
      fi &&
      
      # Use pnpm if available, fallback to npm
      if command -v pnpm >/dev/null 2>&1 && [ -f pnpm-lock.yaml ]; then
        echo 'Using pnpm...' &&
        pnpm install --offline --store-dir /vendor/pnpm-store &&
        pnpm dev
      else
        echo 'Using npm...' &&
        npm run dev
      fi
    "

  keep-websocket-server:
    image: quay.io/soketi/soketi:1.4-16-debian
    container_name: keep-websocket-offline
    ports:
      - "6001:6001"
      - "9601:9601"
    environment:
      - SOKETI_USER_AUTHENTICATION_TIMEOUT=3000
      - SOKETI_DEBUG=1
      - SOKETI_DEFAULT_APP_ID=1
      - SOKETI_DEFAULT_APP_KEY=keepappkey
      - SOKETI_DEFAULT_APP_SECRET=keepappsecret

volumes:
  vendor-data:
    driver: local
  node-cache:
    driver: local
  pnpm-cache:
    driver: local
