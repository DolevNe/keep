# Multi-stage Dockerfile for offline development
FROM node:20-alpine AS node-deps

# Create vendor directory for Node.js dependencies
WORKDIR /vendor/node
COPY keep-ui/package.json keep-ui/package-lock.json ./
# Install npm dependencies to vendor directory
RUN npm ci --cache /vendor/npm-cache

# Create tarball of node_modules for offline use
RUN tar -czf /vendor/node_modules.tar.gz node_modules/

FROM python:3.13.5-alpine AS python-deps

# Install build dependencies for Alpine
RUN apk add --no-cache \
    gcc \
    g++ \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev \
    mysql-client \
    build-base \
    linux-headers \
    git \
    bash

# Create vendor directory for Python dependencies
WORKDIR /vendor/python

# Copy the entire project to install from source
COPY . /app
WORKDIR /app

# Create virtual environment and install project
RUN python -m venv /vendor/venv
RUN /vendor/venv/bin/pip install --upgrade pip

# Try to install the project and its dependencies
RUN /vendor/venv/bin/pip install -e . || echo "Some dependencies may have conflicts, continuing..."

# Create a basic requirements file for core dependencies
RUN echo "fastapi>=0.115.0" > /vendor/requirements-basic.txt && \
    echo "uvicorn>=0.32.0" >> /vendor/requirements-basic.txt && \
    echo "pydantic>=1.10.0" >> /vendor/requirements-basic.txt && \
    echo "sqlalchemy>=2.0.0" >> /vendor/requirements-basic.txt && \
    echo "requests>=2.32.0" >> /vendor/requirements-basic.txt && \
    echo "pyyaml>=6.0.0" >> /vendor/requirements-basic.txt

# Download basic packages for offline use
RUN mkdir -p /vendor/python-packages
RUN /vendor/venv/bin/pip download -d /vendor/python-packages -r /vendor/requirements-basic.txt || true

FROM python:3.13.5-alpine AS final

# Install runtime dependencies
RUN apk add --no-cache \
    bash \
    libstdc++ \
    nodejs \
    npm \
    git \
    postgresql-dev \
    mysql-client

# Create keep user
RUN addgroup -g 1000 keep && \
    adduser -u 1000 -G keep -s /bin/sh -D keep

# Set up working directory
WORKDIR /app
RUN chown keep:keep /app

# Copy Python virtual environment from builder
COPY --from=python-deps /vendor/venv /venv
COPY --from=python-deps /vendor/python-packages /vendor/python-packages

# Copy Node.js dependencies
COPY --from=node-deps /vendor/node_modules.tar.gz /vendor/
COPY --from=node-deps /vendor/npm-cache /vendor/npm-cache

# Set environment variables
ENV PATH="/venv/bin:${PATH}"
ENV VIRTUAL_ENV="/venv"
ENV PYTHONPATH="/app:${PYTHONPATH}"
ENV PYTHONFAULTHANDLER=1
ENV PYTHONHASHSEED=random
ENV PYTHONUNBUFFERED=1
ENV POSTHOG_DISABLED=true
ENV NODE_ENV=development

# Install pnpm globally (preferred package manager)
RUN npm install -g pnpm

# Create directory for vendor dependencies
RUN mkdir -p /vendor && chown -R keep:keep /vendor

# Set ownership
RUN chown -R keep:keep /app /venv /vendor

USER keep

# Default command for development
CMD ["bash"]
